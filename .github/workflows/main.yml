---
name: Run Tests & Publishing

on: [push, pull_request]

permissions:
  contents: write

jobs:
  lint:
    name: Lint Codebase
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
          components: clippy

      - name: Restore Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-make
        uses: davidB/rust-cargo-make@v1

      - name: Run Lints
        run: ci/feature-soundness.sh

  rustfmt:
    name: Check Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: wasm32-unknown-unknown
          components: rustfmt

      - name: Restore Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Check Formatting
        run: cargo +nightly fmt -- --unstable-features

  check-templates:
    name: Check Templates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v3
        with:
          path: stackable

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
          components: clippy

      - name: Restore Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Install Cargo Generate
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-generate

      - name: Generate Template
        run: |
          cargo generate --path stackable/templates/default \
            --name template-default-generated

      - name: Add Stackable Crates
        run: |
          cargo add -p template-default-generated-api \
            --path ../stackable/crates/stackable-bridge

          cargo add -p template-default-generated-client \
            --path ../stackable/crates/stackable-frontend

          cargo add -p template-default-generated-server \
            --path ../stackable/crates/stackable-backend \
            --features cli

          cargo add -p template-default-generated-view \
            --path ../stackable/crates/stackable-frontend

          cargo add -p template-default-generated-view \
            --path ../stackable/crates/stackable-bridge

          cargo add -p template-default-generated-stackctl \
            --path ../stackable/crates/stackctl
        working-directory: template-default-generated

      - name: Run Lints
        run: |
          cargo clippy --bin stackctl
          cargo clippy --bin template-default-generated-client
          cargo clippy --bin template-default-generated-server
        working-directory: template-default-generated

  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs:
      - lint
      - rustfmt
      - check-templates
    steps:
      - name: Checkout Project
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
          components: rustfmt, clippy

      - name: Restore Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Prepare dry-run Registry
        if: "!startsWith(github.ref, 'refs/tags/')"
        run: |
          cargo install cargo-http-registry
          git config --global user.name "Stackable Registry"
          git config --global user.email "registry@stackable.dummy"

          mkdir -p /tmp/dry-run-registry
          nohup cargo-http-registry /tmp/dry-run-registry &

          echo "CARGO_PUBLISH_EXTRA_ARGS=--registry=dry-run" >> $GITHUB_ENV

          echo "[registries.dry-run]" >> ~/.cargo/config.toml
          echo 'index = "file:///tmp/dry-run-registry"' >> ~/.cargo/config.toml
          echo 'token = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"' >> ~/.cargo/config.toml

          sleep 5

      - name: Modify to publish to dry-run Registry
        if: "!startsWith(github.ref, 'refs/tags/')"
        run: |
          cargo install toml-cli

          toml set \
            crates/stackable-backend/Cargo.toml \
            dependencies.stackable-bridge.registry dry-run > /tmp/tempfile-cargo1
          cat /tmp/tempfile-cargo1 > crates/stackable-backend/Cargo.toml

          toml set \
            crates/stackable-backend/Cargo.toml \
            dependencies.stackable-core.registry dry-run > /tmp/tempfile-cargo1
          cat /tmp/tempfile-cargo1 > crates/stackable-backend/Cargo.toml

          toml set \
            crates/stackable-frontend/Cargo.toml \
            dependencies.stackable-bridge.registry dry-run > /tmp/tempfile-cargo1
          cat /tmp/tempfile-cargo1 > crates/stackable-frontend/Cargo.toml

          toml set \
            crates/stackctl/Cargo.toml \
            dependencies.stackable-core.registry dry-run > /tmp/tempfile-cargo1
          cat /tmp/tempfile-cargo1 > crates/stackctl/Cargo.toml

      - name: Prepare crates.io Registry
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "CARGO_PUBLISH_EXTRA_ARGS=--token=${{ secrets.CRATES_IO_TOKEN }}" >> $GITHUB_ENV

      - name: Run cargo publish for stackable-core
        if: "!startsWith(github.ref, 'refs/tags/')"
        run: |
          cargo publish \
            ${{ env.CARGO_PUBLISH_EXTRA_ARGS }} \
            --manifest-path crates/stackable-core/Cargo.toml
        env:
          RUSTFLAGS: "--cfg releasing"

      - name: Wait for Registry to Refresh
        run: sleep 30s
        shell: bash

      - name: Run cargo publish for stackable-bridge
        if: "!startsWith(github.ref, 'refs/tags/')"
        run: |
          cargo publish \
            ${{ env.CARGO_PUBLISH_EXTRA_ARGS }} \
            --manifest-path crates/stackable-bridge/Cargo.toml
        env:
          RUSTFLAGS: "--cfg releasing"

      - name: Wait for Registry to Refresh
        run: sleep 30s
        shell: bash

      - name: Run cargo publish for stackable-backend
        if: "!startsWith(github.ref, 'refs/tags/')"
        run: |
          cargo publish \
            ${{ env.CARGO_PUBLISH_EXTRA_ARGS }} \
            --manifest-path crates/stackable-backend/Cargo.toml
        env:
          RUSTFLAGS: "--cfg releasing"

      - name: Wait for Registry to Refresh
        run: sleep 30s
        shell: bash

      - name: Run cargo publish for stackable-frontend
        if: "!startsWith(github.ref, 'refs/tags/')"
        run: |
          cargo publish \
            ${{ env.CARGO_PUBLISH_EXTRA_ARGS }} \
            --manifest-path crates/stackable-frontend/Cargo.toml
        env:
          RUSTFLAGS: "--cfg releasing"

      - name: Wait for Registry to Refresh
        run: sleep 30s
        shell: bash

      - name: Run cargo publish for stackctl
        if: "!startsWith(github.ref, 'refs/tags/')"
        run: |
          cargo publish \
            ${{ env.CARGO_PUBLISH_EXTRA_ARGS }} \
            --manifest-path crates/stackctl/Cargo.toml
        env:
          RUSTFLAGS: "--cfg releasing"

  publish-templates:
    name: Publish Templates
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    needs:
      - lint
      - rustfmt
      - check-templates
    steps:
      - name: Checkout Project
        uses: actions/checkout@v3

      - name: Read Stackable Version
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          STACKABLE_VER=$(echo '${{ github.ref_name }}' | sed 's/v0*//')
          echo "Current version: $STACKABLE_VER"

          echo "STACKABLE_VER=$(echo '${{ github.ref_name }}' | sed 's/v0*//')" >> $GITHUB_ENV

      - name: Set Stackable Target to 'main'
        if: github.ref == 'refs/heads/main'
        run: |
          echo 'variable::set("stackable_target", "main");' >> templates/default/resolve-crates.rhai

      - name: Set Stackable Target to 'release'
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo 'variable::set("stackable_target", "release");' >> templates/default/resolve-crates.rhai

      - name: Set Stackable Version
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo 'variable::set("stackable_release_ver", "${{ env.STACKABLE_VER }}");' >> templates/default/resolve-crates.rhai

      - name: Publish Main Templates
        if: github.ref == 'refs/heads/main'
        uses: s0/git-publish-subdir-action@v2.6.0
        env:
          REPO: self
          BRANCH: templates-main
          FOLDER: templates
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MESSAGE: "chore: sync template for {sha}"

      - name: Publish Main Templates
        if: github.ref == 'refs/heads/main'
        uses: s0/git-publish-subdir-action@v2.6.0
        env:
          REPO: git@github.com:futursolo/stackable-template.git
          BRANCH: stackable-main
          FOLDER: templates
          MESSAGE: "chore: sync template for {sha}"
          SSH_PRIVATE_KEY: ${{ secrets.TEMPLATE_DEPLOY_PRIVATE_KEY }}

      - name: Publish Release Templates
        if: startsWith(github.ref, 'refs/tags/')
        uses: s0/git-publish-subdir-action@v2.6.0
        env:
          REPO: self
          BRANCH: templates
          FOLDER: templates
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MESSAGE: "chore: sync template for ${{ github.ref_name }}"

      - name: Publish Release Templates
        if: startsWith(github.ref, 'refs/tags/')
        uses: s0/git-publish-subdir-action@v2.6.0
        env:
          REPO: git@github.com:futursolo/stackable-template.git
          BRANCH: main
          FOLDER: templates
          MESSAGE: "chore: sync template for ${{ github.ref_name }}"
          SSH_PRIVATE_KEY: ${{ secrets.TEMPLATE_DEPLOY_PRIVATE_KEY }}
